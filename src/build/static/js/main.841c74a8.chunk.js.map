{"version":3,"sources":["ListLocations.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["ListLocations","state","query","updateQuery","event","_this","setState","target","value","_this2","this","_this$props","props","map","markers","mapMarkers","infowindow","createMarker","createinfoWindow","filteredMapMarkers","filter","mapMarker","title","toUpperCase","includes","filteredMarkers","marker","react_default","a","createElement","className","onSubmit","e","removeMarkers","preventDefault","aria-label","type","placeholder","onChange","key","tabIndex","onClick","Component","Map","center","data","putmap","window","google","maps","document","getElementById","zoom","createMarkerdata","markerArray","i","length","push","venue","name","location","info","console","log","forEach","setMap","boundMap","Object","assertThisInitialized","markerobj","Marker","position","addListener","setAnimation","Animation","BOUNCE","setTimeout","fillingdata","showPosition","fetch","concat","coords","latitude","longitude","then","res","json","result","lat","lng","response","groups","items","maplocator","initialData","src","s","async","onerror","alert","x","getElementsByTagName","parentNode","insertBefore","loadMapAsync","error","setContent","categories","icon","prefix","suffix","address","open","InfoWindow","maxWidth","navigator","geolocation","getCurrentPosition","getLocation","_this$state","data-toggle","data-target","id","src_ListLocations","App","role","src_Map","Boolean","hostname","match","ReactDOM","render","src_App_0","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.841c74a8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nclass ListLocations extends Component {\r\n\tstatic propTypes = {\r\n    map: PropTypes.object.isRequired,\r\n    markers: PropTypes.array.isRequired,\r\n    mapMarkers: PropTypes.array.isRequired,\r\n   createMarker: PropTypes.func.isRequired,\r\n   removeMarkers: PropTypes.func.isRequired,\r\n    createinfoWindow: PropTypes.func.isRequired\r\n  }\r\n\tstate = {\r\n    query: '',\r\n  }\r\n  updateQuery = (event) => { //update query\r\n    this.setState({query: event.target.value})\r\n\r\n  }\r\n\trender() {\r\n\t\t\r\n    const { map, markers, mapMarkers, infowindow ,createMarker,createinfoWindow } = this.props\r\n    const { query } = this.state\r\n    const filteredMapMarkers = mapMarkers.filter(mapMarker => mapMarker.title.toUpperCase().includes(query.toUpperCase()))\r\n    const filteredMarkers = markers.filter(marker => marker.title.toUpperCase().includes(query.toUpperCase()))\r\n    return (\r\n      <div className='list-locations'>\r\n        <form className='form-inline' onSubmit={(e) => {this.props.removeMarkers(mapMarkers);createMarker(map, filteredMarkers, infowindow); e.preventDefault()}} >\r\n          <input className='form-control ' aria-label='search' type='text' value={query} placeholder='Search location' onChange={this.updateQuery} />\r\n          <input className='btn form-control ml-2 btn-primary my-sm-0' type='submit' value='Filter' />\r\n        </form>\r\n        <ul className=\"mt-3\">\r\n          {filteredMapMarkers.map(mapMarker => (\r\n            <li key={mapMarker.title} className=\"mt-2 btn-outline-success p-2\" tabIndex='0' onClick={() => createinfoWindow(mapMarker, infowindow, map)} >\r\n              {mapMarker.title}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ListLocations\r\n","import React, { Component } from \"react\";\r\nimport ListLocations from \"./ListLocations\";\r\nclass Map extends Component {\r\n  state = {\r\n    map: {},\r\n    center: {},\r\n    infowindow: {},\r\n    markers: [],\r\n    mapMarkers: [],\r\n    data: []\r\n  };\r\n  putmap = center => {\r\n    //creating map with center\r\n    \r\n    return new window.google.maps.Map(document.getElementById(\"map\"), {\r\n      center: center,\r\n      zoom: 11\r\n    });\r\n  };\r\n  createMarkerdata = data => {\r\n    // creating markerdata with the passsed data\r\n    let markerArray = [];\r\n    for (var i = 0; i < data.length; i++) {\r\n      markerArray.push({\r\n        title: data[i].venue.name,\r\n        location: data[i].venue.location,\r\n        info: data[i].venue\r\n      });\r\n    }\r\n    return markerArray;\r\n  }; //removing marker when filter is apply\r\n  removeMarkers = mapMarkers => {\r\n    console.log(\"i am called rm\");\r\n    mapMarkers.forEach(mapMarker => {\r\n      mapMarker.setMap(null);\r\n    });\r\n  };\r\n\r\n  // creating marker on map when the data is came as well filter is apply\r\n  createMarker = (map, markers, infowindow) => {\r\n    \r\n\r\n    const boundMap = this;\r\n\r\n    let mapMarkers = [];\r\n\r\n    markers.forEach(marker => {\r\n      //creating marker object with the data passed through createmarkerdata\r\n\r\n      let markerobj = new window.google.maps.Marker({\r\n        position: marker.location,\r\n        map: map,\r\n        title: marker.title,\r\n        info: marker.info,\r\n        \r\n      });\r\n      mapMarkers.push(markerobj); //pushing marker object in mapmarker\r\n       \r\n      markerobj.addListener(\"click\", function() {\r\n        //adding event on marker click to open info window\r\n        \r\n        boundMap.createinfoWindow(markerobj, infowindow);\r\n       \r\n      });\r\n    });\r\n    this.setState({ mapMarkers: mapMarkers });\r\n  };\r\n  createinfoWindow = (marker, infowindow, map) => {\r\n   //Ading Animation\r\n    marker.setAnimation(window.google.maps.Animation.BOUNCE)\r\n   //removing animation\r\n       setTimeout(function(){\r\n        \r\n       marker.setAnimation(null)   \r\n       },1000)    \r\n       //creating infowindow \r\n    if (infowindow.marker !== marker) {\r\n      this.fillingdata(marker, infowindow, map); //filling data to marker\r\n    }\r\n    \r\n  };\r\n\r\n  getLocation() {\r\n    //getting your geocoordinates\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(this.showPosition);\r\n    } else {\r\n      alert(\"Geolocation is not supported by this browser.\");\r\n    }\r\n  }\r\n  showPosition = position => {\r\n    //api for locations and fetching location and data\r\n\r\n    fetch(\r\n      `https://api.foursquare.com/v2/venues/explore?client_id=B0HO1PIPV1LJND2VXQY4I4PZJMWM5HXRQIX4U2NMEDQRTDDA&client_secret=JBK3DFMGTEVN2DOTMDOGOQET0D02TFFDAG0J4O51KTOUC414&v=20130815&ll=${\r\n        position.coords.latitude\r\n      },${position.coords.longitude}&limit=10&radius=10000`\r\n    )\r\n      .then(res => res.json())\r\n      .then(\r\n        result => {\r\n          this.setState({\r\n            center: {\r\n              lat: position.coords.latitude,\r\n              lng: position.coords.longitude\r\n            },\r\n\r\n            data: result.response.groups[0].items,\r\n            maplocator: result.response.groups[0].items\r\n          });\r\n          \r\n          this.createMarkerdata(this.state.data);\r\n          window.initialData = this.initialData;\r\n          loadMapAsync(\r\n            \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBVTiKKxh5pKn9dUSGaIGKJMwOTCl-O5QI&callback=initialData\"\r\n          );\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        error => {\r\n          alert(\"data is not available\");\r\n        }\r\n      );\r\n  };\r\n  fillingdata = (marker, infowindow, map) => {\r\n    \r\n    infowindow.marker = marker;\r\n\r\n    infowindow.setContent(\r\n      `<div><h4><img src=\"${marker.info.categories[0].icon.prefix}bg_64${marker.info.categories[0].icon.suffix}\"alt=\"${marker.info.categories[0].name} image\"> Name:${marker.info.name}</h4><h5>Category:${\r\n        marker.info.categories[0].name\r\n      }</h5><p><b>Address:</b>${marker.info.location.address}</div>`\r\n    );\r\n    infowindow.open(map, marker);\r\n    // Make sure the marker property is cleared if the infowindow is closed.\r\n    infowindow.addListener(\"closeclick\", function() {\r\n      infowindow.marker = null;\r\n    });\r\n  };\r\n  initialData = () => {\r\n    //callback function when script is loaded\r\n\r\n    let map = this.putmap(this.state.center);\r\n\r\n    let infowindow = new window.google.maps.InfoWindow({ maxWidth: 300 });\r\n    this.createMarker(map, this.createMarkerdata(this.state.data), infowindow);\r\n    this.setState({\r\n      map: map,\r\n      markers: this.createMarkerdata(this.state.data),\r\n      infowindow: infowindow\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    //calling geoloaction for fetching location according to coordinate of current location\r\n    this.getLocation();\r\n  }\r\n  render() {\r\n    const { map, markers, mapMarkers, infowindow } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-4 bg-light mr-1 mt-2\">\r\n            <nav className=\"navbar  text-white navbar-expand-md \">\r\n              <button\r\n                className=\"navbar-toggler \"\r\n                type=\"button\"\r\n                data-toggle=\"collapse\"\r\n                data-target=\"#collapsibleNavbar\"\r\n              >\r\n                <span className=\"navbar-toggler-icon text-white \" />\r\n              </button>\r\n              <div className=\"collapse navbar-collapse\" id=\"collapsibleNavbar\">\r\n                <ListLocations\r\n                  map={map}\r\n                  infowindow={infowindow}\r\n                  markers={markers}\r\n                  mapMarkers={mapMarkers}\r\n                  createMarker={this.createMarker}\r\n                  removeMarkers={this.removeMarkers}\r\n                  createinfoWindow={this.createinfoWindow}\r\n                />\r\n              </div>\r\n            </nav>\r\n          </div>\r\n\r\n          <div id=\"map\" className=\"map col-lg-7 mt-2 pb-4\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;\r\n\r\nfunction loadMapAsync(src) {\r\n  //function for loadscriptasync\r\n  var s = document.createElement(\"script\");\r\n\r\n  s.async = true;\r\n  s.src = src;\r\n  s.onerror = () => {\r\n    alert(\"Google Map API can not be loaded.\");\r\n  };\r\n  var x = document.getElementsByTagName(\"script\")[0];\r\n  x.parentNode.insertBefore(s, x);\r\n}\r\n","import React, { Component } from 'react';\nimport Map from './Map.js'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div role='application'>\n      <h1 className=\"bg-dark text-white pl-4 py-4\">Neighbouhood Project</h1>\n        <Map />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}